<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="14" passed="12" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-01-08T19:33:12 IST" name="Default suite" finished-at="2024-01-08T19:37:31 IST" duration-ms="259519">
    <groups>
    </groups>
    <test started-at="2024-01-08T19:33:12 IST" name="Default test" finished-at="2024-01-08T19:37:31 IST" duration-ms="259519">
      <class name="registerpack.RegisterAccountTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:12 IST" name="setup" finished-at="2024-01-08T19:33:21 IST" duration-ms="9302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountWithMandatoryFields()[pri:1, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:21 IST" name="registerAccountWithMandatoryFields" finished-at="2024-01-08T19:33:26 IST" duration-ms="4460" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountWithMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:26 IST" name="tearDown" finished-at="2024-01-08T19:33:26 IST" duration-ms="418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:26 IST" name="setup" finished-at="2024-01-08T19:33:49 IST" duration-ms="22889" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountWithAllFields()[pri:2, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:49 IST" name="registerAccountWithAllFields" finished-at="2024-01-08T19:33:54 IST" duration-ms="4844" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountWithAllFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:54 IST" name="tearDown" finished-at="2024-01-08T19:33:54 IST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:33:54 IST" name="setup" finished-at="2024-01-08T19:34:15 IST" duration-ms="20507" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithoutProvidingAnyFields()[pri:3, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:15 IST" name="registerWithoutProvidingAnyFields" finished-at="2024-01-08T19:34:16 IST" duration-ms="1200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithoutProvidingAnyFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:16 IST" name="tearDown" finished-at="2024-01-08T19:34:16 IST" duration-ms="364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:16 IST" name="setup" finished-at="2024-01-08T19:34:32 IST" duration-ms="15826" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountBySelectingYesNewsletterOption()[pri:4, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:32 IST" name="registerAccountBySelectingYesNewsletterOption" finished-at="2024-01-08T19:34:38 IST" duration-ms="6281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountBySelectingYesNewsletterOption -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:38 IST" name="tearDown" finished-at="2024-01-08T19:34:39 IST" duration-ms="378" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:39 IST" name="setup" finished-at="2024-01-08T19:34:49 IST" duration-ms="9898" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountBySelectingNoNewsletterOption()[pri:5, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:49 IST" name="registerAccountBySelectingNoNewsletterOption" finished-at="2024-01-08T19:34:55 IST" duration-ms="6238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountBySelectingNoNewsletterOption -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:55 IST" name="tearDown" finished-at="2024-01-08T19:34:55 IST" duration-ms="498" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:34:55 IST" name="setup" finished-at="2024-01-08T19:35:04 IST" duration-ms="8926" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountPageNavigationsDifferentWays()[pri:6, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:04 IST" name="registerAccountPageNavigationsDifferentWays" finished-at="2024-01-08T19:35:08 IST" duration-ms="3354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountPageNavigationsDifferentWays -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:08 IST" name="tearDown" finished-at="2024-01-08T19:35:08 IST" duration-ms="497" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:08 IST" name="setup" finished-at="2024-01-08T19:35:17 IST" duration-ms="8439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountByProvidingMismatchingPasswords()[pri:7, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:17 IST" name="registerAccountByProvidingMismatchingPasswords" finished-at="2024-01-08T19:35:20 IST" duration-ms="3406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountByProvidingMismatchingPasswords -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:20 IST" name="tearDown" finished-at="2024-01-08T19:35:20 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:20 IST" name="setup" finished-at="2024-01-08T19:35:30 IST" duration-ms="9200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerDuplicateAccountWithSameEmail()[pri:8, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:30 IST" name="registerDuplicateAccountWithSameEmail" finished-at="2024-01-08T19:35:33 IST" duration-ms="3135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerDuplicateAccountWithSameEmail -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:33 IST" name="tearDown" finished-at="2024-01-08T19:35:33 IST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:33 IST" name="setup" finished-at="2024-01-08T19:35:42 IST" duration-ms="8904" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidEmailAddress(java.lang.String)[pri:9, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:42 IST" name="registerAccountUsingInvalidEmailAddress" data-provider="invalidEmailSupplier" finished-at="2024-01-08T19:35:45 IST" duration-ms="3407" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amotoori]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidEmailAddress -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:45 IST" name="tearDown" finished-at="2024-01-08T19:35:46 IST" duration-ms="478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:46 IST" name="setup" finished-at="2024-01-08T19:35:55 IST" duration-ms="8694" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidEmailAddress(java.lang.String)[pri:9, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:55 IST" name="registerAccountUsingInvalidEmailAddress" data-provider="invalidEmailSupplier" finished-at="2024-01-08T19:35:58 IST" duration-ms="3344" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amotoori@]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidEmailAddress -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:58 IST" name="tearDown" finished-at="2024-01-08T19:35:59 IST" duration-ms="563" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:35:59 IST" name="setup" finished-at="2024-01-08T19:36:07 IST" duration-ms="8711" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidEmailAddress(java.lang.String)[pri:9, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:07 IST" name="registerAccountUsingInvalidEmailAddress" data-provider="invalidEmailSupplier" finished-at="2024-01-08T19:36:11 IST" duration-ms="3740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amotoori@gmail]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidEmailAddress -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:11 IST" name="tearDown" finished-at="2024-01-08T19:36:12 IST" duration-ms="520" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:12 IST" name="setup" finished-at="2024-01-08T19:36:28 IST" duration-ms="16109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidEmailAddress(java.lang.String)[pri:9, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:28 IST" name="registerAccountUsingInvalidEmailAddress" data-provider="invalidEmailSupplier" finished-at="2024-01-08T19:36:31 IST" duration-ms="3250" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amotoori@gmail.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidEmailAddress -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:31 IST" name="tearDown" finished-at="2024-01-08T19:36:32 IST" duration-ms="618" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:36:32 IST" name="setup" finished-at="2024-01-08T19:37:11 IST" duration-ms="39862" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidTelephoneNumber(java.lang.String)[pri:10, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:37:11 IST" name="registerAccountUsingInvalidTelephoneNumber" data-provider="invalidTelephoneSupplier" finished-at="2024-01-08T19:37:15 IST" duration-ms="3929" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[111]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [https://tutorialsninja.com/demo/index.php?route=account/register] but found [https://tutorialsninja.com/demo/index.php?route=account/success]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [https://tutorialsninja.com/demo/index.php?route=account/register] but found [https://tutorialsninja.com/demo/index.php?route=account/success]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at registerpack.RegisterAccountTests.registerAccountUsingInvalidTelephoneNumber(RegisterAccountTests.java:532)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidTelephoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:37:15 IST" name="tearDown" finished-at="2024-01-08T19:37:16 IST" duration-ms="533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:37:16 IST" name="setup" finished-at="2024-01-08T19:37:27 IST" duration-ms="10766" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerAccountUsingInvalidTelephoneNumber(java.lang.String)[pri:10, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:37:27 IST" name="registerAccountUsingInvalidTelephoneNumber" data-provider="invalidTelephoneSupplier" finished-at="2024-01-08T19:37:31 IST" duration-ms="3998" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[abcde]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [https://tutorialsninja.com/demo/index.php?route=account/register] but found [https://tutorialsninja.com/demo/index.php?route=account/success]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [https://tutorialsninja.com/demo/index.php?route=account/register] but found [https://tutorialsninja.com/demo/index.php?route=account/success]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at registerpack.RegisterAccountTests.registerAccountUsingInvalidTelephoneNumber(RegisterAccountTests.java:532)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccountUsingInvalidTelephoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:registerpack.RegisterAccountTests@77847718]" started-at="2024-01-08T19:37:31 IST" name="tearDown" finished-at="2024-01-08T19:37:31 IST" duration-ms="537" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- registerpack.RegisterAccountTests -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
